Описание работы для конкурса Intel® Acceler8
============================================
:author: Александр Соловец
:toc:

:numbered:

Описание поставленной задачи
----------------------------

Условия задачи
~~~~~~~~~~~~~~
Задача конкурса состоит в том, чтобы в заданной матрице, состоящей из целых
чисел, найти подматрицу с максимальной возможной суммой её элементов. В данном
случае 'подматрицой' считается матрица образованная из подмножества строк и
столбцов исходной матрицы, идущих подряд. Иногда этот термин путают с
'минором'. В случае, если ответов может быть несколько, следует вывести любой
из них.

Формат входных данных
~~~~~~~~~~~~~~~~~~~~~
Первым элементом входных данных является число *T*, обозначающее количество
тестов. Следом идут *T* строк, содержащих шесть чисел: *N*, *M*, *S*, *a*,
*b*, *m*. Первые два - число строк и столбцов в исходной матрице, остальные
четыре -- параметры генератора псевдо-случайных чисел.

Ограничения для входных параметров:

- +1 ≤ *T* ≤ 1000+
- +1 ≤ *N*, *M*, *S*, *a*, *b*, *m* ≤ 20000+

Пример входного файла:

---------------
2
4 3 10 3 4 17
14 31 11 4 5 18
---------------

Формат выходных данных
~~~~~~~~~~~~~~~~~~~~~~
Для каждого теста входных данных программа должна вывести строку, содер

Пример выходного файла:

----------------------
Case #1: 0 2 3 2 17 4
Case #2: 0 4 5 9 18 36
----------------------

Алгоритм решения задачи
-----------------------

Последовательный алгоритм
~~~~~~~~~~~~~~~~~~~~~~~~~
В качестве основного алгоритма решения задачи был взял модифицированный
http://en.wikipedia.org/wiki/Maximum_subarray_problem#Kadane.27s_algorithm[алгоритм Джея Кадана].

Параллельный алгоритм
~~~~~~~~~~~~~~~~~~~~~
`в том числе метод распараллеливания и обоснование его выбора необходимые
изменения последовательного алгоритма использованные языки и средства
распараллеливания идеи которые помогли перейти от линейного алгоритма к
параллельному обзор проблемб с которыми пришлось столкнуться и путей их
решения и так далее`

В качестве средств создания был выбран интерфейс +OpenMP+. Во-первых, этот
интерфейс является переносимым и поддерживается компиляторами +GNU+ и +Intel+
языка программирования +С+.

Анализ достигнутых и предполагаемых результатов
-----------------------------------------------

:numbered!:

[appendix]
Исходный код
------------
[source,c,line-number]
--------------------------------
include::../src/msp.c[tabsize=4]
--------------------------------
[appendix]
Список использованных инструментов
----------------------------------
- http://gcc.gnu.org/[+GNU C compiler+]
- http://www.gnu.org/s/bash/[+GNU Bash+]
- http://www.perl.org/[+Perl+]
- http://www.methods.co.nz/asciidoc/[+AsciiDoc+]
- http://www.gnuplot.info/[+gnuplot+]
- http://www.gnu.org/s/src-highlite/[+source-highlight+]
- http://www.gnu.org/s/coreutils/[+GNU Coreutils+]
- http://www.gnu.org/s/make/[+GNU Make+]
